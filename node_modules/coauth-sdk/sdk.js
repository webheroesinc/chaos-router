
var request		= require('request');
var querystring		= require('querystring');
var sqlite3		= require('sqlite3').verbose();

function setdefault(value, d) {
    return value === undefined ? d : value;
}
function getArgs(args, tmpl, callback) {
    var cb, argMap={}, args	= Array.prototype.slice.call(args);
    if (callback && typeof args[args.length-1] === 'function')
	var cb			= args.pop();
    for(var i in tmpl)
	if (args.length > 0)
	    argMap[tmpl[i]]	= args.shift();
    if (callback)
	argMap['callback']	= cb || function() {};
    return argMap;
}

function lstrip(str, chars) {
    var chars	= chars ? chars : " ";
    var re		= new RegExp( "^["+chars+"]*" );
    return str.replace(re, "");
}


function connect(app_id, api_key, config) {
    if (! (this instanceof connect))
	return new connect(app_id, api_key, config);

    config		= setdefault(config, {});
    this.app_id		= app_id;
    this.api_key	= api_key;
    this.api_url	= setdefault(config.api_url, "api.coauth.ca");
    this.version	= setdefault(config.version, 1);

    this.db_name	= setdefault( config.db_name, '.coauth.db' );
    this.db		= new sqlite3.Database(this.db_name);

    this.db.run("CREATE TABLE IF NOT EXISTS users ( coauth_id, identifier UNIQUE )");
}
connect.prototype = {
    "NOUSER": {
        "error": "User ID Does Not Exists",
        "message": "The user ID provided is not active or does not exist."
    },
    "api_request": function() {
	var args	= getArgs(arguments, ['path', 'params'], true);
	var params	= args.params;
	var callback	= args.callback;
	var url		= [this.api_url, "v"+this.version, this.app_id, lstrip(args.path, '/')].join('/');
	if (params === undefined)
	    var params	= {
		'api_key': this.api_key
	    }
	else {
	    params.api_key	= this.api_key;
	    var url	= [url, querystring.stringify(params)].join('?');
	}

	request.get(url, function(err, res, body) {
	    var data	= body === undefined
		? {}
		: JSON.parse(body);
	    callback(err, data);
	});
    },
    "create_user": function() {
	var args	= getArgs(arguments, ['identifier', 'password'], true);
	var identifier	= args.identifier;
	var password	= args.password;
	var callback	= args.callback;
	var self	= this;
	this.db.get(
	    "SELECT * FROM users WHERE identifier = ? LIMIT 1", [identifier],
	    function(err, data){
		if (data !== undefined)
		    return callback({
			"error": "User ID Exists",
			"message": "The user ID provided is already in use."
		    });

		self.api_request('/create/credential', {
		    "user_id": identifier,
		    "password": password
		}, function(err, data) {
		    if(err !== undefined && err !== null) {
			return callback(err);
		    }
		    if(data.error !== undefined) {
			return callback(data);
		    }
		    self.db.run([
			"INSERT INTO users (`coauth_id`, `identifier`)",
			"VALUES (?, ?)"
		    ].join("\n"), [data.user_id, identifier], function(err, inserted) {
			return callback({
			    "user_id": data.user_id
			});
		    });
		});
	    }
	);
    },
    "get_user": function() {
	var args	= getArgs(arguments, ['identifier'], true);
	var identifier	= args.identifier;
	var callback	= args.callback;
	this.db.get(
	    "SELECT * FROM users WHERE identifier = ? LIMIT 1", [identifier],
	    function(err, data){
		if (data === undefined)
		    return callback({
			"error": "User ID Does Not Exists",
			"message": "The user ID provided does not exist."
		    });
		else
		    return callback({
			"user_id": data.coauth_id
		    });
	    }
	);
    },
    "update_user": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier', 'new_identifier', 'password', 'new_password'], true);
	var callback	= args.callback;

	function update_password(ident) {
	    self.update_password(
		ident, args.password, args.new_password,
		function(updated) {
		    if (!updated)
			return callback({
			    "error": "Update error",
			    "message": "Authentication credentials not updated."
			});

		    self.get_user(ident, function(user) {
			callback(user);
		    });
		}
	    );
	}
	
	if (args.new_identifier !== undefined) {
	    this.update_identifier(args.identifier, args.new_identifier, function() {
		if (args.new_password !== undefined)
		    update_password(args.new_identifier);
		else
		    self.get_user(args.new_identifier, function(user) {
			callback(user);
		    });
	    });
	}
	else if (args.new_password !== undefined)
	    update_password(args.identifier);
	else
	    callback(false);
    },
    "update_identifier": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier', 'new_identifier'], true);
	var ident	= args.identifier;
	var new_ident	= args.new_identifier;
	var callback	= args.callback;
	this.get_user(ident, function(user) {
            var query	= [
		"UPDATE users",
		"SET  identifier	= ?",
		"WHERE identifier	= ?"
	    ].join("\n");
            
            self.db.run(query, [new_ident, ident], function() {
		callback();
	    });
	});
    },
    "update_password": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier', 'password', 'new_password'], true);
	var ident	= args.identifier;
	var passwd	= args.password;
	var new_passwd	= args.new_password;
	var callback	= args.callback;
	this.get_user(ident, function(user) {
	    if (user.error !== undefined)
		return callbacK(user);

	    self.api_request('/update/credential', {
		"user_id": user.user_id,
		"password": passwd,
		"new_password": new_passwd
	    }, function(err, data) {
		callback(data.status);
	    });
	});
    },
    "archive_user": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier'], true);
	var ident	= args.identifier;
	var callback	= args.callback;
	this.db.get("SELECT * FROM users WHERE identifier = ? LIMIT 1", [ident], function(err, user) {
	    if (user === undefined)
		return callback({
                    "error": "User ID Does Not Exists",
                    "message": "The user can not be archived, because it does not exist."
		});

	    self.api_request('/archive/credential', {
		"user_id": user.coauth_id
	    }, function(err, data) {
		if (data.status === false )
		    return callback({
			"error": "User ID Does Not Exists",
			"message": "The user ID provided is not active or does not exist.",
		    });

		return callback({
		    "user_id": user.coauth_id
		});
	    });
	});
    },
    "unarchive_user": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier'], true);
	var ident	= args.identifier;
	var callback	= args.callback;
	this.db.get("SELECT * FROM users WHERE identifier = ? LIMIT 1", [ident], function(err, user) {
	    if (user === undefined)
		return callback({
                    "error": "User ID Does Not Exists",
                    "message": "The user can not be unarchived, because it does not exist."
		});

	    self.api_request('/unarchive/credential', {
		"user_id": user.coauth_id
	    }, function(err, data) {
		if (data.status === false )
		    return callback({
			"error": "User ID Does Not Exists",
			"message": "The user ID provided is not active or does not exist.",
		    });

		return callback({
		    "user_id": user.coauth_id
		});
	    });
	});
    },
    "close_session": function() {
	var args	= getArgs(arguments, ['session'], true);
	this.api_request('/close/session', {
	    "session": args.session
	}, function(err, data) {
	    return args.callback(data);
	});
    },
    "auth": function() {
	var self	= this;
	var args	= getArgs(arguments, ['identifier', 'password'], true);
	this.get_coauth_id(args.identifier, function(coauth_id) {
	    if (coauth_id === false)
		return args.callback(self.NOUSER);
	    
	    self.api_request('/create/session', {
		"user_id": coauth_id,
		"password": args.password
	    }, function(err, data) {
		if (data.status === false)
		    return args.callback(data);
		return args.callback({
		    "id": args.identifier,
		    "user_id": data.user_id,
		    "session": data.session
		});
	    });
	});
    },
    "auth_by_token": function() {
	var self	= this;
	var args	= getArgs(arguments, ['token'], true);
	this.api_request('/get/session', {
	    "token": args.token
	}, function(err, data) {
	    if (data.error !== undefined)
		return args.callback(data);

	    self.db.get("SELECT * FROM users WHERE coauth_id = ? LIMIT 1", [data.user_id], function(err, user) {
		return args.callback({
		    "id": user.identifier,
		    "user_id": data.user_id,
		    "session": data.session
		});
	    });
	});
    },
    "auth_by_session": function() {
	var self	= this;
	var args	= getArgs(arguments, ['session'], true);
	this.api_request('/get/session', {
	    "session": args.session
	}, function(err, data) {
	    if (data.error !== undefined)
		return args.callback(data);

	    self.db.get("SELECT * FROM users WHERE coauth_id = ? LIMIT 1", [data.user_id], function(err, user) {
		if(err)
		    return args.callback(err)
		if(! user)
		    user = {};
		return args.callback({
		    "id": user.identifier,
		    "user_id": data.user_id,
		    "session": data.session
		});
	    });
	});
    },
    "get_coauth_id": function() {
	var args	= getArgs(arguments, ['identifier'], true);
	this.get_user(args.identifier, function(data) {
	    return args.callback(data.user_id || false);
	});
    }
}

module.exports	= connect;
