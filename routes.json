{
    "get": {
	"people": {
	    ".table": "people",
            ".structure": {
		"< person_id": {
		    "id": "< person_id",
		    "name": {
			"first": "< first_name",
			"last": "< last_name",
			"full": "{first_name} {last_name}"
		    },
		    "phone": "< phone_number",
		    "personality": "< personality"
		}
            }
	},
	"test_method": {
	    ".method": "hello_world"
	},
	"parent_class_test": {
	    ".method": "ParentClass.heythere"
	},
	"responses": {
	    "static": {
		".response": {
		    "message": "this is inline static data"
		}
	    },
	    "file": {
		".response": "../static_result.json"
	    },
	    "dynamic_file": {
		".response": "< file"
	    },
	    "dynamic": {
		".response": "< name"
	    }
	},
	"test_validate": {
	    ":id": {
		".validate": [
		    ["required_not_empty", "< path.id"]
		],
		".table": "people",
		".where": "person_id = {path.id}",
		".structure": {
		    "id": "= {person_id}",
		    "name": {
			"first": "< first_name",
			"last": "< last_name",
			"full": "{first_name} {last_name}"
		    },
		    "phone": "< phone_number",
		    "personality": "< personality"
		}
	    },
	    "fail_false": {
		".validate": [
		    ["fail_false", "hello", "world"]
		]
	    },
	    "fail_message": {
		".validate": [
		    ["fail_message", "hello", "world"]
		]
	    },
	    "fail_error": {
		".validate": [
		    ["fail_error", "hello", "world"]
		]
	    },
	    "class_method": {
		".validate": [
		    ["TestValidationClass.required_not_empty", "", "= []"]
		]
	    }
	},
	"testBase": {
	    ".base": "../secondBase",
	    ".where": "person_id = 1"
	},
	"secondBase": {
	    ".base": "../baseTest",
	    ".structure": {
		"id": "= {person_id}",
		"name": {
		    "first": "< first_name",
		    "last": "< last_name",
		    "full": "{first_name} {last_name}"
		},
		"phone": "< phone_number",
		"personality": "< personality"
	    }
	},
	"baseTest": {
	    ".table": "people"
	}
    },
    "upload": {
	".method": "uploadTest"
    }
}
