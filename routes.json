{
    "chat": {
	":room": {
	    "__response__": {
		"title": "< input.data.title",
		"message": "< input.data.message"
	    },
	    "__trigger__": [
		"/chat/{{path.room}}"
	    ]
	}
    },
    "get": {
	"empty_method": {
	    "__tasks__": [
		[]
	    ]
	},
	"file": {
	    "__sql__": true,
	    "__table__": "people",
	    "__structure__": {
		"< person_id": "file:../../json/person.json",
		"message": "This structure was loaded from a file."
	    },
	    "array_test": {
		"__base__": "..",
		"__structure__": {
		    "people": [
			"file:../../json/person.json"
		    ],
		    "message": "This structure should be a list of people."
		}
	    },
	    "structure_update": {
		"__base__": "..",
		"__structure_update__": {
		    "< person_id": "file:../../json/name.json",
		    "message": "This structure should only include the names of people."
		}
	    },
	    "recursive_failure": {
		"__base__": "..",
		"__structure__": {
		    "< person_id": "#file:../../json/circular_failure.json"
		}
	    }
	},
	"people": {
	    "__sql__": true,
	    "__table__": "people",
            "__structure__": {
		"< person_id": "file:../../json/person.json"
            },
	    ":id": {
		"__base__": "..",
		"__structure__": "file:../../json/person.json"
	    },
	    "create": {
		"__trigger__": [
		    "/get/people/{{$result.id}}",
		    "/get/people"
		]
	    }
	},
	"test_method": {
	    "__tasks__": [
		["hello_world", "< input.message"]
	    ]
	},
	"parent_class_test": {
	    "__tasks__": [
		["ParentClass.heythere", {
		    "message": "< input.message"
		}]
	    ]
	},
	"responses": {
	    "static": {
		"__response__": {
		    "message": "this is inline static data"
		}
	    },
	    "file": {
		"__response__": "../../static_result.json"
	    },
	    "dynamic_file": {
		"__response__": "< input.file"
	    },
	    "dynamic": {
		"__response__": "< input.name"
	    }
	},
	"test_rules": {
	    ":id": {
		"__rules__": [
		    ["Rules.pass", "< params.id"]
		],
		"__sql__": true,
		"__table__": "people",
		"__where__": "person_id = {{params.id}}",
		"__structure__": {
		    "id": "= {{person_id}}",
		    "name": {
			"first": "< first_name",
			"last": "< last_name",
			"full": "{{first_name}} {{last_name}}"
		    },
		    "phone": "< phone_number",
		    "personality": "< personality"
		}
	    },
	    "fail_false": {
		"__rules__": [
		    ["fail_false", "hello", "world"]
		]
	    },
	    "fail_message": {
		"__rules__": [
		    ["fail_message", "hello", "world"]
		]
	    },
	    "fail_error": {
		"__rules__": [
		    ["fail_error", "hello", "world"]
		]
	    },
	    "class_method": {
		"__rules__": [
		    ["TestValidationClass.required_not_empty", "", "= []"]
		]
	    },
	    "multi_level": {
		"__rules__": [
		    "= Failed at level 1"
		],
		"level_two": {
		    "__rules__": [
			"= Failed at level 2"
		    ]
		}
	    },
	    "string": {
		"__rules__": [
		    "= true",
		    "= 'This is not a pass'",
		    "= false"
		]
	    }
	},
	"testBase": {
	    "__base__": "../secondBase",
	    "__where__": "person_id = 1"
	},
	"secondBase": {
	    "__base__": "../baseTest",
	    "__structure__": {
		"id": "= {{person_id}}",
		"name": {
		    "first": "< first_name",
		    "last": "< last_name",
		    "full": "{{first_name}} {{last_name}}"
		},
		"phone": "< phone_number",
		"personality": "< personality"
	    }
	},
	"baseTest": {
	    "__sql__": true,
	    "__table__": "people"
	}
    },
    "defer": {
	"response": {
	    "__tasks__": [
		["Defer.response"]
	    ]
	},
	"method": {
	    "__tasks__": [
		["Defer.method"]
	    ]
	},
	"route": {
	    "__tasks__": [
		["Defer.route"]
	    ]
	}
    },
    "upload": {
	"__tasks__": [
	    ["uploadTest"]
	]
    }
}
